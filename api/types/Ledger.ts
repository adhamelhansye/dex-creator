/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AccountTypes {
  export type AccountDepositStruct = {
    accountId: BytesLike;
    brokerHash: BytesLike;
    userAddress: AddressLike;
    tokenHash: BytesLike;
    srcChainId: BigNumberish;
    tokenAmount: BigNumberish;
    srcChainDepositNonce: BigNumberish;
  };

  export type AccountDepositStructOutput = [
    accountId: string,
    brokerHash: string,
    userAddress: string,
    tokenHash: string,
    srcChainId: bigint,
    tokenAmount: bigint,
    srcChainDepositNonce: bigint
  ] & {
    accountId: string;
    brokerHash: string;
    userAddress: string;
    tokenHash: string;
    srcChainId: bigint;
    tokenAmount: bigint;
    srcChainDepositNonce: bigint;
  };

  export type AccountDepositSolStruct = {
    accountId: BytesLike;
    brokerHash: BytesLike;
    pubkey: BytesLike;
    tokenHash: BytesLike;
    srcChainId: BigNumberish;
    tokenAmount: BigNumberish;
    srcChainDepositNonce: BigNumberish;
  };

  export type AccountDepositSolStructOutput = [
    accountId: string,
    brokerHash: string,
    pubkey: string,
    tokenHash: string,
    srcChainId: bigint,
    tokenAmount: bigint,
    srcChainDepositNonce: bigint
  ] & {
    accountId: string;
    brokerHash: string;
    pubkey: string;
    tokenHash: string;
    srcChainId: bigint;
    tokenAmount: bigint;
    srcChainDepositNonce: bigint;
  };

  export type AccountWithdrawStruct = {
    accountId: BytesLike;
    sender: AddressLike;
    receiver: AddressLike;
    brokerHash: BytesLike;
    tokenHash: BytesLike;
    tokenAmount: BigNumberish;
    fee: BigNumberish;
    chainId: BigNumberish;
    withdrawNonce: BigNumberish;
  };

  export type AccountWithdrawStructOutput = [
    accountId: string,
    sender: string,
    receiver: string,
    brokerHash: string,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint,
    chainId: bigint,
    withdrawNonce: bigint
  ] & {
    accountId: string;
    sender: string;
    receiver: string;
    brokerHash: string;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
    chainId: bigint;
    withdrawNonce: bigint;
  };

  export type AccountTokenBalancesStruct = {
    tokenHash: BytesLike;
    balance: BigNumberish;
    frozenBalance: BigNumberish;
  };

  export type AccountTokenBalancesStructOutput = [
    tokenHash: string,
    balance: bigint,
    frozenBalance: bigint
  ] & { tokenHash: string; balance: bigint; frozenBalance: bigint };

  export type AccountPerpPositionsStruct = {
    symbolHash: BytesLike;
    positionQty: BigNumberish;
    costPosition: BigNumberish;
    lastSumUnitaryFundings: BigNumberish;
    lastExecutedPrice: BigNumberish;
    lastSettledPrice: BigNumberish;
    averageEntryPrice: BigNumberish;
    openingCost: BigNumberish;
    lastAdlPrice: BigNumberish;
  };

  export type AccountPerpPositionsStructOutput = [
    symbolHash: string,
    positionQty: bigint,
    costPosition: bigint,
    lastSumUnitaryFundings: bigint,
    lastExecutedPrice: bigint,
    lastSettledPrice: bigint,
    averageEntryPrice: bigint,
    openingCost: bigint,
    lastAdlPrice: bigint
  ] & {
    symbolHash: string;
    positionQty: bigint;
    costPosition: bigint;
    lastSumUnitaryFundings: bigint;
    lastExecutedPrice: bigint;
    lastSettledPrice: bigint;
    averageEntryPrice: bigint;
    openingCost: bigint;
    lastAdlPrice: bigint;
  };

  export type AccountSnapshotStruct = {
    accountId: BytesLike;
    brokerHash: BytesLike;
    userAddress: AddressLike;
    lastWithdrawNonce: BigNumberish;
    lastPerpTradeId: BigNumberish;
    lastEngineEventId: BigNumberish;
    lastDepositEventId: BigNumberish;
    tokenBalances: AccountTypes.AccountTokenBalancesStruct[];
    perpPositions: AccountTypes.AccountPerpPositionsStruct[];
    lastDepositSrcChainId: BigNumberish;
    lastDepositSrcChainNonce: BigNumberish;
  };

  export type AccountSnapshotStructOutput = [
    accountId: string,
    brokerHash: string,
    userAddress: string,
    lastWithdrawNonce: bigint,
    lastPerpTradeId: bigint,
    lastEngineEventId: bigint,
    lastDepositEventId: bigint,
    tokenBalances: AccountTypes.AccountTokenBalancesStructOutput[],
    perpPositions: AccountTypes.AccountPerpPositionsStructOutput[],
    lastDepositSrcChainId: bigint,
    lastDepositSrcChainNonce: bigint
  ] & {
    accountId: string;
    brokerHash: string;
    userAddress: string;
    lastWithdrawNonce: bigint;
    lastPerpTradeId: bigint;
    lastEngineEventId: bigint;
    lastDepositEventId: bigint;
    tokenBalances: AccountTypes.AccountTokenBalancesStructOutput[];
    perpPositions: AccountTypes.AccountPerpPositionsStructOutput[];
    lastDepositSrcChainId: bigint;
    lastDepositSrcChainNonce: bigint;
  };
}

export declare namespace EventTypes {
  export type AdlStruct = {
    accountId: BytesLike;
    insuranceAccountId: BytesLike;
    symbolHash: BytesLike;
    positionQtyTransfer: BigNumberish;
    costPositionTransfer: BigNumberish;
    adlPrice: BigNumberish;
    sumUnitaryFundings: BigNumberish;
    timestamp: BigNumberish;
  };

  export type AdlStructOutput = [
    accountId: string,
    insuranceAccountId: string,
    symbolHash: string,
    positionQtyTransfer: bigint,
    costPositionTransfer: bigint,
    adlPrice: bigint,
    sumUnitaryFundings: bigint,
    timestamp: bigint
  ] & {
    accountId: string;
    insuranceAccountId: string;
    symbolHash: string;
    positionQtyTransfer: bigint;
    costPositionTransfer: bigint;
    adlPrice: bigint;
    sumUnitaryFundings: bigint;
    timestamp: bigint;
  };

  export type AdlV2Struct = {
    accountId: BytesLike;
    symbolHash: BytesLike;
    positionQtyTransfer: BigNumberish;
    costPositionTransfer: BigNumberish;
    adlPrice: BigNumberish;
    sumUnitaryFundings: BigNumberish;
    timestamp: BigNumberish;
    isInsuranceAccount: boolean;
  };

  export type AdlV2StructOutput = [
    accountId: string,
    symbolHash: string,
    positionQtyTransfer: bigint,
    costPositionTransfer: bigint,
    adlPrice: bigint,
    sumUnitaryFundings: bigint,
    timestamp: bigint,
    isInsuranceAccount: boolean
  ] & {
    accountId: string;
    symbolHash: string;
    positionQtyTransfer: bigint;
    costPositionTransfer: bigint;
    adlPrice: bigint;
    sumUnitaryFundings: bigint;
    timestamp: bigint;
    isInsuranceAccount: boolean;
  };

  export type BalanceTransferStruct = {
    fromAccountId: BytesLike;
    toAccountId: BytesLike;
    amount: BigNumberish;
    tokenHash: BytesLike;
    isFromAccountId: boolean;
    transferType: BigNumberish;
    transferId: BigNumberish;
  };

  export type BalanceTransferStructOutput = [
    fromAccountId: string,
    toAccountId: string,
    amount: bigint,
    tokenHash: string,
    isFromAccountId: boolean,
    transferType: bigint,
    transferId: bigint
  ] & {
    fromAccountId: string;
    toAccountId: string;
    amount: bigint;
    tokenHash: string;
    isFromAccountId: boolean;
    transferType: bigint;
    transferId: bigint;
  };

  export type DelegateSignerStruct = {
    delegateSigner: AddressLike;
    delegateContract: AddressLike;
    brokerHash: BytesLike;
    chainId: BigNumberish;
  };

  export type DelegateSignerStructOutput = [
    delegateSigner: string,
    delegateContract: string,
    brokerHash: string,
    chainId: bigint
  ] & {
    delegateSigner: string;
    delegateContract: string;
    brokerHash: string;
    chainId: bigint;
  };

  export type WithdrawDataStruct = {
    tokenAmount: BigNumberish;
    fee: BigNumberish;
    chainId: BigNumberish;
    accountId: BytesLike;
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    sender: AddressLike;
    withdrawNonce: BigNumberish;
    receiver: AddressLike;
    timestamp: BigNumberish;
    brokerId: string;
    tokenSymbol: string;
  };

  export type WithdrawDataStructOutput = [
    tokenAmount: bigint,
    fee: bigint,
    chainId: bigint,
    accountId: string,
    r: string,
    s: string,
    v: bigint,
    sender: string,
    withdrawNonce: bigint,
    receiver: string,
    timestamp: bigint,
    brokerId: string,
    tokenSymbol: string
  ] & {
    tokenAmount: bigint;
    fee: bigint;
    chainId: bigint;
    accountId: string;
    r: string;
    s: string;
    v: bigint;
    sender: string;
    withdrawNonce: bigint;
    receiver: string;
    timestamp: bigint;
    brokerId: string;
    tokenSymbol: string;
  };

  export type FeeDistributionStruct = {
    fromAccountId: BytesLike;
    toAccountId: BytesLike;
    amount: BigNumberish;
    tokenHash: BytesLike;
  };

  export type FeeDistributionStructOutput = [
    fromAccountId: string,
    toAccountId: string,
    amount: bigint,
    tokenHash: string
  ] & {
    fromAccountId: string;
    toAccountId: string;
    amount: bigint;
    tokenHash: string;
  };

  export type LiquidationTransferStruct = {
    liquidatorAccountId: BytesLike;
    symbolHash: BytesLike;
    positionQtyTransfer: BigNumberish;
    costPositionTransfer: BigNumberish;
    liquidatorFee: BigNumberish;
    insuranceFee: BigNumberish;
    liquidationFee: BigNumberish;
    markPrice: BigNumberish;
    sumUnitaryFundings: BigNumberish;
    liquidationTransferId: BigNumberish;
  };

  export type LiquidationTransferStructOutput = [
    liquidatorAccountId: string,
    symbolHash: string,
    positionQtyTransfer: bigint,
    costPositionTransfer: bigint,
    liquidatorFee: bigint,
    insuranceFee: bigint,
    liquidationFee: bigint,
    markPrice: bigint,
    sumUnitaryFundings: bigint,
    liquidationTransferId: bigint
  ] & {
    liquidatorAccountId: string;
    symbolHash: string;
    positionQtyTransfer: bigint;
    costPositionTransfer: bigint;
    liquidatorFee: bigint;
    insuranceFee: bigint;
    liquidationFee: bigint;
    markPrice: bigint;
    sumUnitaryFundings: bigint;
    liquidationTransferId: bigint;
  };

  export type LiquidationStruct = {
    liquidatedAccountId: BytesLike;
    insuranceAccountId: BytesLike;
    liquidatedAssetHash: BytesLike;
    insuranceTransferAmount: BigNumberish;
    timestamp: BigNumberish;
    liquidationTransfers: EventTypes.LiquidationTransferStruct[];
  };

  export type LiquidationStructOutput = [
    liquidatedAccountId: string,
    insuranceAccountId: string,
    liquidatedAssetHash: string,
    insuranceTransferAmount: bigint,
    timestamp: bigint,
    liquidationTransfers: EventTypes.LiquidationTransferStructOutput[]
  ] & {
    liquidatedAccountId: string;
    insuranceAccountId: string;
    liquidatedAssetHash: string;
    insuranceTransferAmount: bigint;
    timestamp: bigint;
    liquidationTransfers: EventTypes.LiquidationTransferStructOutput[];
  };

  export type LiquidationTransferV2Struct = {
    symbolHash: BytesLike;
    positionQtyTransfer: BigNumberish;
    costPositionTransfer: BigNumberish;
    fee: BigNumberish;
    markPrice: BigNumberish;
    sumUnitaryFundings: BigNumberish;
  };

  export type LiquidationTransferV2StructOutput = [
    symbolHash: string,
    positionQtyTransfer: bigint,
    costPositionTransfer: bigint,
    fee: bigint,
    markPrice: bigint,
    sumUnitaryFundings: bigint
  ] & {
    symbolHash: string;
    positionQtyTransfer: bigint;
    costPositionTransfer: bigint;
    fee: bigint;
    markPrice: bigint;
    sumUnitaryFundings: bigint;
  };

  export type LiquidationV2Struct = {
    accountId: BytesLike;
    liquidatedAssetHash: BytesLike;
    insuranceTransferAmount: BigNumberish;
    timestamp: BigNumberish;
    isInsuranceAccount: boolean;
    liquidationTransfers: EventTypes.LiquidationTransferV2Struct[];
  };

  export type LiquidationV2StructOutput = [
    accountId: string,
    liquidatedAssetHash: string,
    insuranceTransferAmount: bigint,
    timestamp: bigint,
    isInsuranceAccount: boolean,
    liquidationTransfers: EventTypes.LiquidationTransferV2StructOutput[]
  ] & {
    accountId: string;
    liquidatedAssetHash: string;
    insuranceTransferAmount: bigint;
    timestamp: bigint;
    isInsuranceAccount: boolean;
    liquidationTransfers: EventTypes.LiquidationTransferV2StructOutput[];
  };

  export type SettlementExecutionStruct = {
    symbolHash: BytesLike;
    markPrice: BigNumberish;
    sumUnitaryFundings: BigNumberish;
    settledAmount: BigNumberish;
  };

  export type SettlementExecutionStructOutput = [
    symbolHash: string,
    markPrice: bigint,
    sumUnitaryFundings: bigint,
    settledAmount: bigint
  ] & {
    symbolHash: string;
    markPrice: bigint;
    sumUnitaryFundings: bigint;
    settledAmount: bigint;
  };

  export type SettlementStruct = {
    accountId: BytesLike;
    settledAssetHash: BytesLike;
    insuranceAccountId: BytesLike;
    settledAmount: BigNumberish;
    insuranceTransferAmount: BigNumberish;
    timestamp: BigNumberish;
    settlementExecutions: EventTypes.SettlementExecutionStruct[];
  };

  export type SettlementStructOutput = [
    accountId: string,
    settledAssetHash: string,
    insuranceAccountId: string,
    settledAmount: bigint,
    insuranceTransferAmount: bigint,
    timestamp: bigint,
    settlementExecutions: EventTypes.SettlementExecutionStructOutput[]
  ] & {
    accountId: string;
    settledAssetHash: string;
    insuranceAccountId: string;
    settledAmount: bigint;
    insuranceTransferAmount: bigint;
    timestamp: bigint;
    settlementExecutions: EventTypes.SettlementExecutionStructOutput[];
  };

  export type SwapResultStruct = {
    accountId: BytesLike;
    buyTokenHash: BytesLike;
    sellTokenHash: BytesLike;
    buyQuantity: BigNumberish;
    sellQuantity: BigNumberish;
    chainId: BigNumberish;
    swapStatus: BigNumberish;
  };

  export type SwapResultStructOutput = [
    accountId: string,
    buyTokenHash: string,
    sellTokenHash: string,
    buyQuantity: bigint,
    sellQuantity: bigint,
    chainId: bigint,
    swapStatus: bigint
  ] & {
    accountId: string;
    buyTokenHash: string;
    sellTokenHash: string;
    buyQuantity: bigint;
    sellQuantity: bigint;
    chainId: bigint;
    swapStatus: bigint;
  };

  export type Withdraw2ContractStruct = {
    tokenAmount: BigNumberish;
    fee: BigNumberish;
    chainId: BigNumberish;
    accountId: BytesLike;
    vaultType: BigNumberish;
    sender: AddressLike;
    withdrawNonce: BigNumberish;
    receiver: AddressLike;
    timestamp: BigNumberish;
    brokerHash: BytesLike;
    tokenHash: BytesLike;
    clientId: BigNumberish;
  };

  export type Withdraw2ContractStructOutput = [
    tokenAmount: bigint,
    fee: bigint,
    chainId: bigint,
    accountId: string,
    vaultType: bigint,
    sender: string,
    withdrawNonce: bigint,
    receiver: string,
    timestamp: bigint,
    brokerHash: string,
    tokenHash: string,
    clientId: bigint
  ] & {
    tokenAmount: bigint;
    fee: bigint;
    chainId: bigint;
    accountId: string;
    vaultType: bigint;
    sender: string;
    withdrawNonce: bigint;
    receiver: string;
    timestamp: bigint;
    brokerHash: string;
    tokenHash: string;
    clientId: bigint;
  };

  export type WithdrawDataSolStruct = {
    tokenAmount: BigNumberish;
    fee: BigNumberish;
    chainId: BigNumberish;
    accountId: BytesLike;
    r: BytesLike;
    s: BytesLike;
    sender: BytesLike;
    receiver: BytesLike;
    withdrawNonce: BigNumberish;
    timestamp: BigNumberish;
    brokerId: string;
    tokenSymbol: string;
  };

  export type WithdrawDataSolStructOutput = [
    tokenAmount: bigint,
    fee: bigint,
    chainId: bigint,
    accountId: string,
    r: string,
    s: string,
    sender: string,
    receiver: string,
    withdrawNonce: bigint,
    timestamp: bigint,
    brokerId: string,
    tokenSymbol: string
  ] & {
    tokenAmount: bigint;
    fee: bigint;
    chainId: bigint;
    accountId: string;
    r: string;
    s: string;
    sender: string;
    receiver: string;
    withdrawNonce: bigint;
    timestamp: bigint;
    brokerId: string;
    tokenSymbol: string;
  };

  export type InternalTransferTrackStruct = {
    side: BigNumberish;
    tokenHash: BytesLike;
    amount: BigNumberish;
  };

  export type InternalTransferTrackStructOutput = [
    side: bigint,
    tokenHash: string,
    amount: bigint
  ] & { side: bigint; tokenHash: string; amount: bigint };
}

export declare namespace PerpTypes {
  export type FuturesTradeUploadStruct = {
    accountId: BytesLike;
    symbolHash: BytesLike;
    feeAssetHash: BytesLike;
    tradeQty: BigNumberish;
    notional: BigNumberish;
    executedPrice: BigNumberish;
    fee: BigNumberish;
    sumUnitaryFundings: BigNumberish;
    tradeId: BigNumberish;
    matchId: BigNumberish;
    timestamp: BigNumberish;
    side: boolean;
  };

  export type FuturesTradeUploadStructOutput = [
    accountId: string,
    symbolHash: string,
    feeAssetHash: string,
    tradeQty: bigint,
    notional: bigint,
    executedPrice: bigint,
    fee: bigint,
    sumUnitaryFundings: bigint,
    tradeId: bigint,
    matchId: bigint,
    timestamp: bigint,
    side: boolean
  ] & {
    accountId: string;
    symbolHash: string;
    feeAssetHash: string;
    tradeQty: bigint;
    notional: bigint;
    executedPrice: bigint;
    fee: bigint;
    sumUnitaryFundings: bigint;
    tradeId: bigint;
    matchId: bigint;
    timestamp: bigint;
    side: boolean;
  };
}

export declare namespace RebalanceTypes {
  export type RebalanceBurnUploadDataStruct = {
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    rebalanceId: BigNumberish;
    amount: BigNumberish;
    tokenHash: BytesLike;
    burnChainId: BigNumberish;
    mintChainId: BigNumberish;
  };

  export type RebalanceBurnUploadDataStructOutput = [
    r: string,
    s: string,
    v: bigint,
    rebalanceId: bigint,
    amount: bigint,
    tokenHash: string,
    burnChainId: bigint,
    mintChainId: bigint
  ] & {
    r: string;
    s: string;
    v: bigint;
    rebalanceId: bigint;
    amount: bigint;
    tokenHash: string;
    burnChainId: bigint;
    mintChainId: bigint;
  };

  export type RebalanceMintUploadDataStruct = {
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    rebalanceId: BigNumberish;
    amount: BigNumberish;
    tokenHash: BytesLike;
    burnChainId: BigNumberish;
    mintChainId: BigNumberish;
    messageBytes: BytesLike;
    messageSignature: BytesLike;
  };

  export type RebalanceMintUploadDataStructOutput = [
    r: string,
    s: string,
    v: bigint,
    rebalanceId: bigint,
    amount: bigint,
    tokenHash: string,
    burnChainId: bigint,
    mintChainId: bigint,
    messageBytes: string,
    messageSignature: string
  ] & {
    r: string;
    s: string;
    v: bigint;
    rebalanceId: bigint;
    amount: bigint;
    tokenHash: string;
    burnChainId: bigint;
    mintChainId: bigint;
    messageBytes: string;
    messageSignature: string;
  };

  export type RebalanceBurnCCFinishDataStruct = {
    success: boolean;
    rebalanceId: BigNumberish;
    amount: BigNumberish;
    tokenHash: BytesLike;
    burnChainId: BigNumberish;
    mintChainId: BigNumberish;
  };

  export type RebalanceBurnCCFinishDataStructOutput = [
    success: boolean,
    rebalanceId: bigint,
    amount: bigint,
    tokenHash: string,
    burnChainId: bigint,
    mintChainId: bigint
  ] & {
    success: boolean;
    rebalanceId: bigint;
    amount: bigint;
    tokenHash: string;
    burnChainId: bigint;
    mintChainId: bigint;
  };

  export type RebalanceMintCCFinishDataStruct = {
    success: boolean;
    rebalanceId: BigNumberish;
    amount: BigNumberish;
    tokenHash: BytesLike;
    burnChainId: BigNumberish;
    mintChainId: BigNumberish;
  };

  export type RebalanceMintCCFinishDataStructOutput = [
    success: boolean,
    rebalanceId: bigint,
    amount: bigint,
    tokenHash: string,
    burnChainId: bigint,
    mintChainId: bigint
  ] & {
    success: boolean;
    rebalanceId: bigint;
    amount: bigint;
    tokenHash: string;
    burnChainId: bigint;
    mintChainId: bigint;
  };
}

export interface LedgerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BROKER_MANAGER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "SYMBOL_MANAGER_ROLE"
      | "accountDeposit"
      | "accountDepositSol"
      | "accountWithDrawFinish"
      | "accountWithdrawFail"
      | "batchGetUserLedger(bytes32[])"
      | "batchGetUserLedger(bytes32[],bytes32[],bytes32[])"
      | "contractSigner"
      | "crossChainManagerAddress"
      | "crossChainManagerV2Address"
      | "executeAdl"
      | "executeAdlV2"
      | "executeBalanceTransfer"
      | "executeDelegateSigner"
      | "executeDelegateWithdrawAction"
      | "executeFeeDistribution"
      | "executeLiquidation"
      | "executeLiquidationV2"
      | "executeProcessValidatedFutures"
      | "executeProcessValidatedFuturesBatch"
      | "executeRebalanceBurn"
      | "executeRebalanceMint"
      | "executeSettlement"
      | "executeSwapResultUpload"
      | "executeWithdraw2Contract"
      | "executeWithdrawAction"
      | "executeWithdrawSolAction"
      | "feeManager"
      | "getBalanceTransferState"
      | "getFrozenWithdrawNonce"
      | "getRoleAdmin"
      | "getUserEscrowBalance"
      | "getUserTokenBalance"
      | "getUserTotalFrozenBalance"
      | "globalDepositId"
      | "globalEventId"
      | "grantRole"
      | "hasRole"
      | "idToPrimeWallet"
      | "initialize"
      | "marketManager"
      | "operatorManagerAddress"
      | "owner"
      | "rebalanceBurnFinish"
      | "rebalanceMintFinish"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setBrokerFromLedger"
      | "setCrossChainManager"
      | "setCrossChainManagerV2"
      | "setFeeManager"
      | "setLedgerImplA"
      | "setLedgerImplB"
      | "setLedgerImplC"
      | "setLedgerImplD"
      | "setMarketManager"
      | "setOperatorManagerAddress"
      | "setPrimeWallet"
      | "setVaultManager"
      | "transferOwnership"
      | "vaultManager"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountDeposit(bytes32,uint64,uint64,address,bytes32,uint128,uint256,uint64,bytes32)"
      | "AccountDeposit(bytes32,uint64,uint64,address,bytes32,uint128,uint256,uint64,bytes32,uint256)"
      | "AccountDepositSol"
      | "AccountRegister(bytes32,bytes32,address)"
      | "AccountRegister(bytes32,bytes32,bytes32)"
      | "AccountRegister(bytes32,bytes32,address,uint256)"
      | "AccountWithdraw2Contract"
      | "AccountWithdrawApprove(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128)"
      | "AccountWithdrawApprove(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint256)"
      | "AccountWithdrawFail(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint8)"
      | "AccountWithdrawFail(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint256,uint8)"
      | "AccountWithdrawFinish(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128)"
      | "AccountWithdrawFinish(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint256)"
      | "AccountWithdrawSolApprove"
      | "AccountWithdrawSolFail"
      | "AdlResult"
      | "AdlResultV2"
      | "BalanceTransfer"
      | "ChangeCrossChainManager"
      | "ChangeCrossChainManagerV2"
      | "ChangeFeeManager"
      | "ChangeLedgerImplA"
      | "ChangeLedgerImplB"
      | "ChangeLedgerImplC"
      | "ChangeLedgerImplD"
      | "ChangeMarketManager"
      | "ChangeOperatorManager"
      | "ChangeVaultManager"
      | "DelegateSigner"
      | "FeeDistribution"
      | "Initialized"
      | "InternalTransferFinalised"
      | "LiquidationResult"
      | "LiquidationResultV2"
      | "LiquidationTransfer"
      | "LiquidationTransferV2"
      | "OwnershipTransferred"
      | "PrimeWalletSet"
      | "ProcessValidatedFutures(bytes32,bytes32,bytes32,int128,int128,uint128,int128,int128,uint64,uint64,uint64,bool)"
      | "ProcessValidatedFutures(bytes32,bytes32,bytes32,int128,int128,uint128,uint128,int128,uint64,uint64,uint64,bool)"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetBrokerFromLedgerInitiated"
      | "SettlementExecution"
      | "SettlementResult"
      | "SwapResultUploaded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BROKER_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SYMBOL_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountDeposit",
    values: [AccountTypes.AccountDepositStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "accountDepositSol",
    values: [AccountTypes.AccountDepositSolStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "accountWithDrawFinish",
    values: [AccountTypes.AccountWithdrawStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "accountWithdrawFail",
    values: [AccountTypes.AccountWithdrawStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetUserLedger(bytes32[])",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetUserLedger(bytes32[],bytes32[],bytes32[])",
    values: [BytesLike[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contractSigner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainManagerV2Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeAdl",
    values: [EventTypes.AdlStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAdlV2",
    values: [EventTypes.AdlV2Struct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBalanceTransfer",
    values: [EventTypes.BalanceTransferStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDelegateSigner",
    values: [EventTypes.DelegateSignerStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDelegateWithdrawAction",
    values: [EventTypes.WithdrawDataStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeFeeDistribution",
    values: [EventTypes.FeeDistributionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeLiquidation",
    values: [EventTypes.LiquidationStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeLiquidationV2",
    values: [EventTypes.LiquidationV2Struct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProcessValidatedFutures",
    values: [PerpTypes.FuturesTradeUploadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProcessValidatedFuturesBatch",
    values: [PerpTypes.FuturesTradeUploadStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRebalanceBurn",
    values: [RebalanceTypes.RebalanceBurnUploadDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRebalanceMint",
    values: [RebalanceTypes.RebalanceMintUploadDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSettlement",
    values: [EventTypes.SettlementStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwapResultUpload",
    values: [EventTypes.SwapResultStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdraw2Contract",
    values: [EventTypes.Withdraw2ContractStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawAction",
    values: [EventTypes.WithdrawDataStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawSolAction",
    values: [EventTypes.WithdrawDataSolStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceTransferState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFrozenWithdrawNonce",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEscrowBalance",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenBalance",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalFrozenBalance",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalEventId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "idToPrimeWallet",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceBurnFinish",
    values: [RebalanceTypes.RebalanceBurnCCFinishDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceMintFinish",
    values: [RebalanceTypes.RebalanceMintCCFinishDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBrokerFromLedger",
    values: [BigNumberish[], BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrossChainManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrossChainManagerV2",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLedgerImplA",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLedgerImplB",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLedgerImplC",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLedgerImplD",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorManagerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimeWallet",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BROKER_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SYMBOL_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountDepositSol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountWithDrawFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountWithdrawFail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetUserLedger(bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetUserLedger(bytes32[],bytes32[],bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossChainManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossChainManagerV2Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executeAdl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeAdlV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBalanceTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDelegateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDelegateWithdrawAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeFeeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeLiquidationV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProcessValidatedFutures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProcessValidatedFuturesBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRebalanceBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRebalanceMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapResultUpload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdraw2Contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawSolAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceTransferState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFrozenWithdrawNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEscrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalFrozenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalEventId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "idToPrimeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceBurnFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceMintFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBrokerFromLedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrossChainManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrossChainManagerV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLedgerImplA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLedgerImplB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLedgerImplC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLedgerImplD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_Event {
  export type InputTuple = [
    accountId: BytesLike,
    depositNonce: BigNumberish,
    eventId: BigNumberish,
    userAddress: AddressLike,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    srcChainId: BigNumberish,
    srcChainDepositNonce: BigNumberish,
    brokerHash: BytesLike
  ];
  export type OutputTuple = [
    accountId: string,
    depositNonce: bigint,
    eventId: bigint,
    userAddress: string,
    tokenHash: string,
    tokenAmount: bigint,
    srcChainId: bigint,
    srcChainDepositNonce: bigint,
    brokerHash: string
  ];
  export interface OutputObject {
    accountId: string;
    depositNonce: bigint;
    eventId: bigint;
    userAddress: string;
    tokenHash: string;
    tokenAmount: bigint;
    srcChainId: bigint;
    srcChainDepositNonce: bigint;
    brokerHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_uint256_Event {
  export type InputTuple = [
    accountId: BytesLike,
    depositNonce: BigNumberish,
    eventId: BigNumberish,
    userAddress: AddressLike,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    srcChainId: BigNumberish,
    srcChainDepositNonce: BigNumberish,
    brokerHash: BytesLike,
    blocktime: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    depositNonce: bigint,
    eventId: bigint,
    userAddress: string,
    tokenHash: string,
    tokenAmount: bigint,
    srcChainId: bigint,
    srcChainDepositNonce: bigint,
    brokerHash: string,
    blocktime: bigint
  ];
  export interface OutputObject {
    accountId: string;
    depositNonce: bigint;
    eventId: bigint;
    userAddress: string;
    tokenHash: string;
    tokenAmount: bigint;
    srcChainId: bigint;
    srcChainDepositNonce: bigint;
    brokerHash: string;
    blocktime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountDepositSolEvent {
  export type InputTuple = [
    accountId: BytesLike,
    depositNonce: BigNumberish,
    eventId: BigNumberish,
    pubkey: BytesLike,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    srcChainId: BigNumberish,
    srcChainDepositNonce: BigNumberish,
    brokerHash: BytesLike
  ];
  export type OutputTuple = [
    accountId: string,
    depositNonce: bigint,
    eventId: bigint,
    pubkey: string,
    tokenHash: string,
    tokenAmount: bigint,
    srcChainId: bigint,
    srcChainDepositNonce: bigint,
    brokerHash: string
  ];
  export interface OutputObject {
    accountId: string;
    depositNonce: bigint;
    eventId: bigint;
    pubkey: string;
    tokenHash: string;
    tokenAmount: bigint;
    srcChainId: bigint;
    srcChainDepositNonce: bigint;
    brokerHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountRegister_bytes32_bytes32_address_Event {
  export type InputTuple = [
    accountId: BytesLike,
    brokerId: BytesLike,
    userAddress: AddressLike
  ];
  export type OutputTuple = [
    accountId: string,
    brokerId: string,
    userAddress: string
  ];
  export interface OutputObject {
    accountId: string;
    brokerId: string;
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountRegister_bytes32_bytes32_bytes32_Event {
  export type InputTuple = [
    accountId: BytesLike,
    brokerId: BytesLike,
    pubkey: BytesLike
  ];
  export type OutputTuple = [
    accountId: string,
    brokerId: string,
    pubkey: string
  ];
  export interface OutputObject {
    accountId: string;
    brokerId: string;
    pubkey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountRegister_bytes32_bytes32_address_uint256_Event {
  export type InputTuple = [
    accountId: BytesLike,
    brokerId: BytesLike,
    userAddress: AddressLike,
    blocktime: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    brokerId: string,
    userAddress: string,
    blocktime: bigint
  ];
  export interface OutputObject {
    accountId: string;
    brokerId: string;
    userAddress: string;
    blocktime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountWithdraw2ContractEvent {
  export type InputTuple = [
    accountId: BytesLike,
    withdrawNonce: BigNumberish,
    eventId: BigNumberish,
    chainId: BigNumberish,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    fee: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    accountId: string,
    withdrawNonce: bigint,
    eventId: bigint,
    chainId: bigint,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint,
    receiver: string
  ];
  export interface OutputObject {
    accountId: string;
    withdrawNonce: bigint;
    eventId: bigint;
    chainId: bigint;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event {
  export type InputTuple = [
    accountId: BytesLike,
    withdrawNonce: BigNumberish,
    eventId: BigNumberish,
    brokerHash: BytesLike,
    sender: AddressLike,
    receiver: AddressLike,
    chainId: BigNumberish,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    withdrawNonce: bigint,
    eventId: bigint,
    brokerHash: string,
    sender: string,
    receiver: string,
    chainId: bigint,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    accountId: string;
    withdrawNonce: bigint;
    eventId: bigint;
    brokerHash: string;
    sender: string;
    receiver: string;
    chainId: bigint;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event {
  export type InputTuple = [
    accountId: BytesLike,
    withdrawNonce: BigNumberish,
    eventId: BigNumberish,
    brokerHash: BytesLike,
    sender: AddressLike,
    receiver: AddressLike,
    chainId: BigNumberish,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    fee: BigNumberish,
    blocktime: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    withdrawNonce: bigint,
    eventId: bigint,
    brokerHash: string,
    sender: string,
    receiver: string,
    chainId: bigint,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint,
    blocktime: bigint
  ];
  export interface OutputObject {
    accountId: string;
    withdrawNonce: bigint;
    eventId: bigint;
    brokerHash: string;
    sender: string;
    receiver: string;
    chainId: bigint;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
    blocktime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint8_Event {
  export type InputTuple = [
    accountId: BytesLike,
    withdrawNonce: BigNumberish,
    eventId: BigNumberish,
    brokerHash: BytesLike,
    sender: AddressLike,
    receiver: AddressLike,
    chainId: BigNumberish,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    fee: BigNumberish,
    failReason: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    withdrawNonce: bigint,
    eventId: bigint,
    brokerHash: string,
    sender: string,
    receiver: string,
    chainId: bigint,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint,
    failReason: bigint
  ];
  export interface OutputObject {
    accountId: string;
    withdrawNonce: bigint;
    eventId: bigint;
    brokerHash: string;
    sender: string;
    receiver: string;
    chainId: bigint;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
    failReason: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_uint8_Event {
  export type InputTuple = [
    accountId: BytesLike,
    withdrawNonce: BigNumberish,
    eventId: BigNumberish,
    brokerHash: BytesLike,
    sender: AddressLike,
    receiver: AddressLike,
    chainId: BigNumberish,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    fee: BigNumberish,
    blocktime: BigNumberish,
    failReason: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    withdrawNonce: bigint,
    eventId: bigint,
    brokerHash: string,
    sender: string,
    receiver: string,
    chainId: bigint,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint,
    blocktime: bigint,
    failReason: bigint
  ];
  export interface OutputObject {
    accountId: string;
    withdrawNonce: bigint;
    eventId: bigint;
    brokerHash: string;
    sender: string;
    receiver: string;
    chainId: bigint;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
    blocktime: bigint;
    failReason: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event {
  export type InputTuple = [
    accountId: BytesLike,
    withdrawNonce: BigNumberish,
    eventId: BigNumberish,
    brokerHash: BytesLike,
    sender: AddressLike,
    receiver: AddressLike,
    chainId: BigNumberish,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    withdrawNonce: bigint,
    eventId: bigint,
    brokerHash: string,
    sender: string,
    receiver: string,
    chainId: bigint,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    accountId: string;
    withdrawNonce: bigint;
    eventId: bigint;
    brokerHash: string;
    sender: string;
    receiver: string;
    chainId: bigint;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event {
  export type InputTuple = [
    accountId: BytesLike,
    withdrawNonce: BigNumberish,
    eventId: BigNumberish,
    brokerHash: BytesLike,
    sender: AddressLike,
    receiver: AddressLike,
    chainId: BigNumberish,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    fee: BigNumberish,
    blocktime: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    withdrawNonce: bigint,
    eventId: bigint,
    brokerHash: string,
    sender: string,
    receiver: string,
    chainId: bigint,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint,
    blocktime: bigint
  ];
  export interface OutputObject {
    accountId: string;
    withdrawNonce: bigint;
    eventId: bigint;
    brokerHash: string;
    sender: string;
    receiver: string;
    chainId: bigint;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
    blocktime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountWithdrawSolApproveEvent {
  export type InputTuple = [
    accountId: BytesLike,
    withdrawNonce: BigNumberish,
    eventId: BigNumberish,
    brokerHash: BytesLike,
    sender: BytesLike,
    receiver: BytesLike,
    chainId: BigNumberish,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    withdrawNonce: bigint,
    eventId: bigint,
    brokerHash: string,
    sender: string,
    receiver: string,
    chainId: bigint,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    accountId: string;
    withdrawNonce: bigint;
    eventId: bigint;
    brokerHash: string;
    sender: string;
    receiver: string;
    chainId: bigint;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountWithdrawSolFailEvent {
  export type InputTuple = [
    accountId: BytesLike,
    withdrawNonce: BigNumberish,
    eventId: BigNumberish,
    brokerHash: BytesLike,
    sender: BytesLike,
    receiver: BytesLike,
    chainId: BigNumberish,
    tokenHash: BytesLike,
    tokenAmount: BigNumberish,
    fee: BigNumberish,
    failReason: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    withdrawNonce: bigint,
    eventId: bigint,
    brokerHash: string,
    sender: string,
    receiver: string,
    chainId: bigint,
    tokenHash: string,
    tokenAmount: bigint,
    fee: bigint,
    failReason: bigint
  ];
  export interface OutputObject {
    accountId: string;
    withdrawNonce: bigint;
    eventId: bigint;
    brokerHash: string;
    sender: string;
    receiver: string;
    chainId: bigint;
    tokenHash: string;
    tokenAmount: bigint;
    fee: bigint;
    failReason: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdlResultEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    accountId: BytesLike,
    insuranceAccountId: BytesLike,
    symbolHash: BytesLike,
    positionQtyTransfer: BigNumberish,
    costPositionTransfer: BigNumberish,
    adlPrice: BigNumberish,
    sumUnitaryFundings: BigNumberish,
    lastEngineEventId: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    accountId: string,
    insuranceAccountId: string,
    symbolHash: string,
    positionQtyTransfer: bigint,
    costPositionTransfer: bigint,
    adlPrice: bigint,
    sumUnitaryFundings: bigint,
    lastEngineEventId: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    accountId: string;
    insuranceAccountId: string;
    symbolHash: string;
    positionQtyTransfer: bigint;
    costPositionTransfer: bigint;
    adlPrice: bigint;
    sumUnitaryFundings: bigint;
    lastEngineEventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdlResultV2Event {
  export type InputTuple = [
    eventId: BigNumberish,
    accountId: BytesLike,
    symbolHash: BytesLike,
    positionQtyTransfer: BigNumberish,
    costPositionTransfer: BigNumberish,
    adlPrice: BigNumberish,
    sumUnitaryFundings: BigNumberish,
    lastEngineEventId: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    accountId: string,
    symbolHash: string,
    positionQtyTransfer: bigint,
    costPositionTransfer: bigint,
    adlPrice: bigint,
    sumUnitaryFundings: bigint,
    lastEngineEventId: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    accountId: string;
    symbolHash: string;
    positionQtyTransfer: bigint;
    costPositionTransfer: bigint;
    adlPrice: bigint;
    sumUnitaryFundings: bigint;
    lastEngineEventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BalanceTransferEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    transferId: BigNumberish,
    fromAccountId: BytesLike,
    toAccountId: BytesLike,
    amount: BigNumberish,
    tokenHash: BytesLike,
    isFromAccountId: boolean,
    transferType: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    transferId: bigint,
    fromAccountId: string,
    toAccountId: string,
    amount: bigint,
    tokenHash: string,
    isFromAccountId: boolean,
    transferType: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    transferId: bigint;
    fromAccountId: string;
    toAccountId: string;
    amount: bigint;
    tokenHash: string;
    isFromAccountId: boolean;
    transferType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeCrossChainManagerEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeCrossChainManagerV2Event {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeFeeManagerEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeLedgerImplAEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeLedgerImplBEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeLedgerImplCEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeLedgerImplDEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeMarketManagerEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeOperatorManagerEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeVaultManagerEvent {
  export type InputTuple = [oldAddress: AddressLike, newAddress: AddressLike];
  export type OutputTuple = [oldAddress: string, newAddress: string];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateSignerEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    chainId: BigNumberish,
    accountId: BytesLike,
    delegateContract: AddressLike,
    brokerHash: BytesLike,
    delegateSigner: AddressLike
  ];
  export type OutputTuple = [
    eventId: bigint,
    chainId: bigint,
    accountId: string,
    delegateContract: string,
    brokerHash: string,
    delegateSigner: string
  ];
  export interface OutputObject {
    eventId: bigint;
    chainId: bigint;
    accountId: string;
    delegateContract: string;
    brokerHash: string;
    delegateSigner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeDistributionEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    fromAccountId: BytesLike,
    toAccountId: BytesLike,
    amount: BigNumberish,
    tokenHash: BytesLike
  ];
  export type OutputTuple = [
    eventId: bigint,
    fromAccountId: string,
    toAccountId: string,
    amount: bigint,
    tokenHash: string
  ];
  export interface OutputObject {
    eventId: bigint;
    fromAccountId: string;
    toAccountId: string;
    amount: bigint;
    tokenHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InternalTransferFinalisedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    transferId: BigNumberish,
    toAccountId: BytesLike,
    tokenHash: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    transferId: bigint,
    toAccountId: string,
    tokenHash: string,
    amount: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    transferId: bigint;
    toAccountId: string;
    tokenHash: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationResultEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    liquidatedAccountId: BytesLike,
    insuranceAccountId: BytesLike,
    liquidatedAssetHash: BytesLike,
    insuranceTransferAmount: BigNumberish,
    lastEngineEventId: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    liquidatedAccountId: string,
    insuranceAccountId: string,
    liquidatedAssetHash: string,
    insuranceTransferAmount: bigint,
    lastEngineEventId: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    liquidatedAccountId: string;
    insuranceAccountId: string;
    liquidatedAssetHash: string;
    insuranceTransferAmount: bigint;
    lastEngineEventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationResultV2Event {
  export type InputTuple = [
    eventId: BigNumberish,
    accountId: BytesLike,
    liquidatedAssetHash: BytesLike,
    insuranceTransferAmount: BigNumberish,
    lastEngineEventId: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    accountId: string,
    liquidatedAssetHash: string,
    insuranceTransferAmount: bigint,
    lastEngineEventId: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    accountId: string;
    liquidatedAssetHash: string;
    insuranceTransferAmount: bigint;
    lastEngineEventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationTransferEvent {
  export type InputTuple = [
    liquidationTransferId: BigNumberish,
    liquidatorAccountId: BytesLike,
    symbolHash: BytesLike,
    positionQtyTransfer: BigNumberish,
    costPositionTransfer: BigNumberish,
    liquidatorFee: BigNumberish,
    insuranceFee: BigNumberish,
    liquidationFee: BigNumberish,
    markPrice: BigNumberish,
    sumUnitaryFundings: BigNumberish
  ];
  export type OutputTuple = [
    liquidationTransferId: bigint,
    liquidatorAccountId: string,
    symbolHash: string,
    positionQtyTransfer: bigint,
    costPositionTransfer: bigint,
    liquidatorFee: bigint,
    insuranceFee: bigint,
    liquidationFee: bigint,
    markPrice: bigint,
    sumUnitaryFundings: bigint
  ];
  export interface OutputObject {
    liquidationTransferId: bigint;
    liquidatorAccountId: string;
    symbolHash: string;
    positionQtyTransfer: bigint;
    costPositionTransfer: bigint;
    liquidatorFee: bigint;
    insuranceFee: bigint;
    liquidationFee: bigint;
    markPrice: bigint;
    sumUnitaryFundings: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationTransferV2Event {
  export type InputTuple = [
    accountId: BytesLike,
    symbolHash: BytesLike,
    positionQtyTransfer: BigNumberish,
    costPositionTransfer: BigNumberish,
    fee: BigNumberish,
    markPrice: BigNumberish,
    sumUnitaryFundings: BigNumberish
  ];
  export type OutputTuple = [
    accountId: string,
    symbolHash: string,
    positionQtyTransfer: bigint,
    costPositionTransfer: bigint,
    fee: bigint,
    markPrice: bigint,
    sumUnitaryFundings: bigint
  ];
  export interface OutputObject {
    accountId: string;
    symbolHash: string;
    positionQtyTransfer: bigint;
    costPositionTransfer: bigint;
    fee: bigint;
    markPrice: bigint;
    sumUnitaryFundings: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrimeWalletSetEvent {
  export type InputTuple = [id: BytesLike, primeWallet: AddressLike];
  export type OutputTuple = [id: string, primeWallet: string];
  export interface OutputObject {
    id: string;
    primeWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_int128_int128_uint64_uint64_uint64_bool_Event {
  export type InputTuple = [
    accountId: BytesLike,
    symbolHash: BytesLike,
    feeAssetHash: BytesLike,
    tradeQty: BigNumberish,
    notional: BigNumberish,
    executedPrice: BigNumberish,
    fee: BigNumberish,
    sumUnitaryFundings: BigNumberish,
    tradeId: BigNumberish,
    matchId: BigNumberish,
    timestamp: BigNumberish,
    side: boolean
  ];
  export type OutputTuple = [
    accountId: string,
    symbolHash: string,
    feeAssetHash: string,
    tradeQty: bigint,
    notional: bigint,
    executedPrice: bigint,
    fee: bigint,
    sumUnitaryFundings: bigint,
    tradeId: bigint,
    matchId: bigint,
    timestamp: bigint,
    side: boolean
  ];
  export interface OutputObject {
    accountId: string;
    symbolHash: string;
    feeAssetHash: string;
    tradeQty: bigint;
    notional: bigint;
    executedPrice: bigint;
    fee: bigint;
    sumUnitaryFundings: bigint;
    tradeId: bigint;
    matchId: bigint;
    timestamp: bigint;
    side: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_uint128_int128_uint64_uint64_uint64_bool_Event {
  export type InputTuple = [
    accountId: BytesLike,
    symbolHash: BytesLike,
    feeAssetHash: BytesLike,
    tradeQty: BigNumberish,
    notional: BigNumberish,
    executedPrice: BigNumberish,
    fee: BigNumberish,
    sumUnitaryFundings: BigNumberish,
    tradeId: BigNumberish,
    matchId: BigNumberish,
    timestamp: BigNumberish,
    side: boolean
  ];
  export type OutputTuple = [
    accountId: string,
    symbolHash: string,
    feeAssetHash: string,
    tradeQty: bigint,
    notional: bigint,
    executedPrice: bigint,
    fee: bigint,
    sumUnitaryFundings: bigint,
    tradeId: bigint,
    matchId: bigint,
    timestamp: bigint,
    side: boolean
  ];
  export interface OutputObject {
    accountId: string;
    symbolHash: string;
    feeAssetHash: string;
    tradeQty: bigint;
    notional: bigint;
    executedPrice: bigint;
    fee: bigint;
    sumUnitaryFundings: bigint;
    tradeId: bigint;
    matchId: bigint;
    timestamp: bigint;
    side: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBrokerFromLedgerInitiatedEvent {
  export type InputTuple = [
    chainIds: BigNumberish[],
    brokerHash: BytesLike,
    allowed: boolean
  ];
  export type OutputTuple = [
    chainIds: bigint[],
    brokerHash: string,
    allowed: boolean
  ];
  export interface OutputObject {
    chainIds: bigint[];
    brokerHash: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementExecutionEvent {
  export type InputTuple = [
    symbolHash: BytesLike,
    markPrice: BigNumberish,
    sumUnitaryFundings: BigNumberish,
    settledAmount: BigNumberish
  ];
  export type OutputTuple = [
    symbolHash: string,
    markPrice: bigint,
    sumUnitaryFundings: bigint,
    settledAmount: bigint
  ];
  export interface OutputObject {
    symbolHash: string;
    markPrice: bigint;
    sumUnitaryFundings: bigint;
    settledAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementResultEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    accountId: BytesLike,
    settledAmount: BigNumberish,
    settledAssetHash: BytesLike,
    insuranceAccountId: BytesLike,
    insuranceTransferAmount: BigNumberish,
    settlementExecutionsCount: BigNumberish,
    lastEngineEventId: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    accountId: string,
    settledAmount: bigint,
    settledAssetHash: string,
    insuranceAccountId: string,
    insuranceTransferAmount: bigint,
    settlementExecutionsCount: bigint,
    lastEngineEventId: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    accountId: string;
    settledAmount: bigint;
    settledAssetHash: string;
    insuranceAccountId: string;
    insuranceTransferAmount: bigint;
    settlementExecutionsCount: bigint;
    lastEngineEventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapResultUploadedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    accountId: BytesLike,
    buyTokenHash: BytesLike,
    sellTokenHash: BytesLike,
    buyQuantity: BigNumberish,
    sellQuantity: BigNumberish,
    chainId: BigNumberish,
    swapStatus: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    accountId: string,
    buyTokenHash: string,
    sellTokenHash: string,
    buyQuantity: bigint,
    sellQuantity: bigint,
    chainId: bigint,
    swapStatus: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    accountId: string;
    buyTokenHash: string;
    sellTokenHash: string;
    buyQuantity: bigint;
    sellQuantity: bigint;
    chainId: bigint;
    swapStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Ledger extends BaseContract {
  connect(runner?: ContractRunner | null): Ledger;
  waitForDeployment(): Promise<this>;

  interface: LedgerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BROKER_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  SYMBOL_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  accountDeposit: TypedContractMethod<
    [data: AccountTypes.AccountDepositStruct],
    [void],
    "nonpayable"
  >;

  accountDepositSol: TypedContractMethod<
    [data: AccountTypes.AccountDepositSolStruct],
    [void],
    "nonpayable"
  >;

  accountWithDrawFinish: TypedContractMethod<
    [withdraw: AccountTypes.AccountWithdrawStruct],
    [void],
    "nonpayable"
  >;

  accountWithdrawFail: TypedContractMethod<
    [withdraw: AccountTypes.AccountWithdrawStruct],
    [void],
    "nonpayable"
  >;

  "batchGetUserLedger(bytes32[])": TypedContractMethod<
    [accountIds: BytesLike[]],
    [AccountTypes.AccountSnapshotStructOutput[]],
    "view"
  >;

  "batchGetUserLedger(bytes32[],bytes32[],bytes32[])": TypedContractMethod<
    [accountIds: BytesLike[], tokens: BytesLike[], symbols: BytesLike[]],
    [AccountTypes.AccountSnapshotStructOutput[]],
    "view"
  >;

  contractSigner: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { chainId: bigint; signer: string }],
    "view"
  >;

  crossChainManagerAddress: TypedContractMethod<[], [string], "view">;

  crossChainManagerV2Address: TypedContractMethod<[], [string], "view">;

  executeAdl: TypedContractMethod<
    [adl: EventTypes.AdlStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeAdlV2: TypedContractMethod<
    [adl: EventTypes.AdlV2Struct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeBalanceTransfer: TypedContractMethod<
    [balanceTransfer: EventTypes.BalanceTransferStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeDelegateSigner: TypedContractMethod<
    [delegateSigner: EventTypes.DelegateSignerStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeDelegateWithdrawAction: TypedContractMethod<
    [delegateWithdraw: EventTypes.WithdrawDataStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeFeeDistribution: TypedContractMethod<
    [feeDistribution: EventTypes.FeeDistributionStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeLiquidation: TypedContractMethod<
    [liquidation: EventTypes.LiquidationStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeLiquidationV2: TypedContractMethod<
    [liquidation: EventTypes.LiquidationV2Struct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeProcessValidatedFutures: TypedContractMethod<
    [trade: PerpTypes.FuturesTradeUploadStruct],
    [void],
    "nonpayable"
  >;

  executeProcessValidatedFuturesBatch: TypedContractMethod<
    [trades: PerpTypes.FuturesTradeUploadStruct[]],
    [void],
    "nonpayable"
  >;

  executeRebalanceBurn: TypedContractMethod<
    [data: RebalanceTypes.RebalanceBurnUploadDataStruct],
    [void],
    "nonpayable"
  >;

  executeRebalanceMint: TypedContractMethod<
    [data: RebalanceTypes.RebalanceMintUploadDataStruct],
    [void],
    "nonpayable"
  >;

  executeSettlement: TypedContractMethod<
    [settlement: EventTypes.SettlementStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeSwapResultUpload: TypedContractMethod<
    [swapResultUpload: EventTypes.SwapResultStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeWithdraw2Contract: TypedContractMethod<
    [data: EventTypes.Withdraw2ContractStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeWithdrawAction: TypedContractMethod<
    [withdraw: EventTypes.WithdrawDataStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeWithdrawSolAction: TypedContractMethod<
    [withdraw: EventTypes.WithdrawDataSolStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeManager: TypedContractMethod<[], [string], "view">;

  getBalanceTransferState: TypedContractMethod<
    [transferId: BigNumberish],
    [EventTypes.InternalTransferTrackStructOutput],
    "view"
  >;

  getFrozenWithdrawNonce: TypedContractMethod<
    [accountId: BytesLike, withdrawNonce: BigNumberish, tokenHash: BytesLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserEscrowBalance: TypedContractMethod<
    [accountId: BytesLike, tokenHash: BytesLike],
    [bigint],
    "view"
  >;

  getUserTokenBalance: TypedContractMethod<
    [accountId: BytesLike, tokenHash: BytesLike],
    [bigint],
    "view"
  >;

  getUserTotalFrozenBalance: TypedContractMethod<
    [accountId: BytesLike, tokenHash: BytesLike],
    [bigint],
    "view"
  >;

  globalDepositId: TypedContractMethod<[], [bigint], "view">;

  globalEventId: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  idToPrimeWallet: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  marketManager: TypedContractMethod<[], [string], "view">;

  operatorManagerAddress: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rebalanceBurnFinish: TypedContractMethod<
    [data: RebalanceTypes.RebalanceBurnCCFinishDataStruct],
    [void],
    "nonpayable"
  >;

  rebalanceMintFinish: TypedContractMethod<
    [data: RebalanceTypes.RebalanceMintCCFinishDataStruct],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setBrokerFromLedger: TypedContractMethod<
    [
      chainIds: BigNumberish[],
      brokerHash: BytesLike,
      brokerIndex: BigNumberish,
      allowed: boolean
    ],
    [void],
    "nonpayable"
  >;

  setCrossChainManager: TypedContractMethod<
    [_crossChainManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setCrossChainManagerV2: TypedContractMethod<
    [_crossChainManagerV2Address: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeManager: TypedContractMethod<
    [_feeManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setLedgerImplA: TypedContractMethod<
    [_ledgerImplA: AddressLike],
    [void],
    "nonpayable"
  >;

  setLedgerImplB: TypedContractMethod<
    [_ledgerImplB: AddressLike],
    [void],
    "nonpayable"
  >;

  setLedgerImplC: TypedContractMethod<
    [_ledgerImplC: AddressLike],
    [void],
    "nonpayable"
  >;

  setLedgerImplD: TypedContractMethod<
    [_ledgerImplD: AddressLike],
    [void],
    "nonpayable"
  >;

  setMarketManager: TypedContractMethod<
    [_marketManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setOperatorManagerAddress: TypedContractMethod<
    [_operatorManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setPrimeWallet: TypedContractMethod<
    [id: BytesLike, _primeWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  setVaultManager: TypedContractMethod<
    [_vaultManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vaultManager: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BROKER_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SYMBOL_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accountDeposit"
  ): TypedContractMethod<
    [data: AccountTypes.AccountDepositStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "accountDepositSol"
  ): TypedContractMethod<
    [data: AccountTypes.AccountDepositSolStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "accountWithDrawFinish"
  ): TypedContractMethod<
    [withdraw: AccountTypes.AccountWithdrawStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "accountWithdrawFail"
  ): TypedContractMethod<
    [withdraw: AccountTypes.AccountWithdrawStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchGetUserLedger(bytes32[])"
  ): TypedContractMethod<
    [accountIds: BytesLike[]],
    [AccountTypes.AccountSnapshotStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchGetUserLedger(bytes32[],bytes32[],bytes32[])"
  ): TypedContractMethod<
    [accountIds: BytesLike[], tokens: BytesLike[], symbols: BytesLike[]],
    [AccountTypes.AccountSnapshotStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractSigner"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, string] & { chainId: bigint; signer: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "crossChainManagerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "crossChainManagerV2Address"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeAdl"
  ): TypedContractMethod<
    [adl: EventTypes.AdlStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeAdlV2"
  ): TypedContractMethod<
    [adl: EventTypes.AdlV2Struct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeBalanceTransfer"
  ): TypedContractMethod<
    [balanceTransfer: EventTypes.BalanceTransferStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeDelegateSigner"
  ): TypedContractMethod<
    [delegateSigner: EventTypes.DelegateSignerStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeDelegateWithdrawAction"
  ): TypedContractMethod<
    [delegateWithdraw: EventTypes.WithdrawDataStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeFeeDistribution"
  ): TypedContractMethod<
    [feeDistribution: EventTypes.FeeDistributionStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeLiquidation"
  ): TypedContractMethod<
    [liquidation: EventTypes.LiquidationStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeLiquidationV2"
  ): TypedContractMethod<
    [liquidation: EventTypes.LiquidationV2Struct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeProcessValidatedFutures"
  ): TypedContractMethod<
    [trade: PerpTypes.FuturesTradeUploadStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeProcessValidatedFuturesBatch"
  ): TypedContractMethod<
    [trades: PerpTypes.FuturesTradeUploadStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeRebalanceBurn"
  ): TypedContractMethod<
    [data: RebalanceTypes.RebalanceBurnUploadDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeRebalanceMint"
  ): TypedContractMethod<
    [data: RebalanceTypes.RebalanceMintUploadDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeSettlement"
  ): TypedContractMethod<
    [settlement: EventTypes.SettlementStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeSwapResultUpload"
  ): TypedContractMethod<
    [swapResultUpload: EventTypes.SwapResultStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeWithdraw2Contract"
  ): TypedContractMethod<
    [data: EventTypes.Withdraw2ContractStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeWithdrawAction"
  ): TypedContractMethod<
    [withdraw: EventTypes.WithdrawDataStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeWithdrawSolAction"
  ): TypedContractMethod<
    [withdraw: EventTypes.WithdrawDataSolStruct, eventId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBalanceTransferState"
  ): TypedContractMethod<
    [transferId: BigNumberish],
    [EventTypes.InternalTransferTrackStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFrozenWithdrawNonce"
  ): TypedContractMethod<
    [accountId: BytesLike, withdrawNonce: BigNumberish, tokenHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserEscrowBalance"
  ): TypedContractMethod<
    [accountId: BytesLike, tokenHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTokenBalance"
  ): TypedContractMethod<
    [accountId: BytesLike, tokenHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTotalFrozenBalance"
  ): TypedContractMethod<
    [accountId: BytesLike, tokenHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalDepositId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "globalEventId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "idToPrimeWallet"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "marketManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "operatorManagerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rebalanceBurnFinish"
  ): TypedContractMethod<
    [data: RebalanceTypes.RebalanceBurnCCFinishDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rebalanceMintFinish"
  ): TypedContractMethod<
    [data: RebalanceTypes.RebalanceMintCCFinishDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBrokerFromLedger"
  ): TypedContractMethod<
    [
      chainIds: BigNumberish[],
      brokerHash: BytesLike,
      brokerIndex: BigNumberish,
      allowed: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCrossChainManager"
  ): TypedContractMethod<
    [_crossChainManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCrossChainManagerV2"
  ): TypedContractMethod<
    [_crossChainManagerV2Address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeManager"
  ): TypedContractMethod<
    [_feeManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLedgerImplA"
  ): TypedContractMethod<[_ledgerImplA: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLedgerImplB"
  ): TypedContractMethod<[_ledgerImplB: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLedgerImplC"
  ): TypedContractMethod<[_ledgerImplC: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLedgerImplD"
  ): TypedContractMethod<[_ledgerImplD: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketManager"
  ): TypedContractMethod<
    [_marketManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOperatorManagerAddress"
  ): TypedContractMethod<
    [_operatorManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPrimeWallet"
  ): TypedContractMethod<
    [id: BytesLike, _primeWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVaultManager"
  ): TypedContractMethod<
    [_vaultManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vaultManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AccountDeposit(bytes32,uint64,uint64,address,bytes32,uint128,uint256,uint64,bytes32)"
  ): TypedContractEvent<
    AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_Event.InputTuple,
    AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_Event.OutputTuple,
    AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_Event.OutputObject
  >;
  getEvent(
    key: "AccountDeposit(bytes32,uint64,uint64,address,bytes32,uint128,uint256,uint64,bytes32,uint256)"
  ): TypedContractEvent<
    AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_uint256_Event.InputTuple,
    AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_uint256_Event.OutputTuple,
    AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_uint256_Event.OutputObject
  >;
  getEvent(
    key: "AccountDepositSol"
  ): TypedContractEvent<
    AccountDepositSolEvent.InputTuple,
    AccountDepositSolEvent.OutputTuple,
    AccountDepositSolEvent.OutputObject
  >;
  getEvent(
    key: "AccountRegister(bytes32,bytes32,address)"
  ): TypedContractEvent<
    AccountRegister_bytes32_bytes32_address_Event.InputTuple,
    AccountRegister_bytes32_bytes32_address_Event.OutputTuple,
    AccountRegister_bytes32_bytes32_address_Event.OutputObject
  >;
  getEvent(
    key: "AccountRegister(bytes32,bytes32,bytes32)"
  ): TypedContractEvent<
    AccountRegister_bytes32_bytes32_bytes32_Event.InputTuple,
    AccountRegister_bytes32_bytes32_bytes32_Event.OutputTuple,
    AccountRegister_bytes32_bytes32_bytes32_Event.OutputObject
  >;
  getEvent(
    key: "AccountRegister(bytes32,bytes32,address,uint256)"
  ): TypedContractEvent<
    AccountRegister_bytes32_bytes32_address_uint256_Event.InputTuple,
    AccountRegister_bytes32_bytes32_address_uint256_Event.OutputTuple,
    AccountRegister_bytes32_bytes32_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "AccountWithdraw2Contract"
  ): TypedContractEvent<
    AccountWithdraw2ContractEvent.InputTuple,
    AccountWithdraw2ContractEvent.OutputTuple,
    AccountWithdraw2ContractEvent.OutputObject
  >;
  getEvent(
    key: "AccountWithdrawApprove(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128)"
  ): TypedContractEvent<
    AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.InputTuple,
    AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.OutputTuple,
    AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.OutputObject
  >;
  getEvent(
    key: "AccountWithdrawApprove(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint256)"
  ): TypedContractEvent<
    AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.InputTuple,
    AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.OutputTuple,
    AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.OutputObject
  >;
  getEvent(
    key: "AccountWithdrawFail(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint8)"
  ): TypedContractEvent<
    AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint8_Event.InputTuple,
    AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint8_Event.OutputTuple,
    AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint8_Event.OutputObject
  >;
  getEvent(
    key: "AccountWithdrawFail(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint256,uint8)"
  ): TypedContractEvent<
    AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_uint8_Event.InputTuple,
    AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_uint8_Event.OutputTuple,
    AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_uint8_Event.OutputObject
  >;
  getEvent(
    key: "AccountWithdrawFinish(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128)"
  ): TypedContractEvent<
    AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.InputTuple,
    AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.OutputTuple,
    AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.OutputObject
  >;
  getEvent(
    key: "AccountWithdrawFinish(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint256)"
  ): TypedContractEvent<
    AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.InputTuple,
    AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.OutputTuple,
    AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.OutputObject
  >;
  getEvent(
    key: "AccountWithdrawSolApprove"
  ): TypedContractEvent<
    AccountWithdrawSolApproveEvent.InputTuple,
    AccountWithdrawSolApproveEvent.OutputTuple,
    AccountWithdrawSolApproveEvent.OutputObject
  >;
  getEvent(
    key: "AccountWithdrawSolFail"
  ): TypedContractEvent<
    AccountWithdrawSolFailEvent.InputTuple,
    AccountWithdrawSolFailEvent.OutputTuple,
    AccountWithdrawSolFailEvent.OutputObject
  >;
  getEvent(
    key: "AdlResult"
  ): TypedContractEvent<
    AdlResultEvent.InputTuple,
    AdlResultEvent.OutputTuple,
    AdlResultEvent.OutputObject
  >;
  getEvent(
    key: "AdlResultV2"
  ): TypedContractEvent<
    AdlResultV2Event.InputTuple,
    AdlResultV2Event.OutputTuple,
    AdlResultV2Event.OutputObject
  >;
  getEvent(
    key: "BalanceTransfer"
  ): TypedContractEvent<
    BalanceTransferEvent.InputTuple,
    BalanceTransferEvent.OutputTuple,
    BalanceTransferEvent.OutputObject
  >;
  getEvent(
    key: "ChangeCrossChainManager"
  ): TypedContractEvent<
    ChangeCrossChainManagerEvent.InputTuple,
    ChangeCrossChainManagerEvent.OutputTuple,
    ChangeCrossChainManagerEvent.OutputObject
  >;
  getEvent(
    key: "ChangeCrossChainManagerV2"
  ): TypedContractEvent<
    ChangeCrossChainManagerV2Event.InputTuple,
    ChangeCrossChainManagerV2Event.OutputTuple,
    ChangeCrossChainManagerV2Event.OutputObject
  >;
  getEvent(
    key: "ChangeFeeManager"
  ): TypedContractEvent<
    ChangeFeeManagerEvent.InputTuple,
    ChangeFeeManagerEvent.OutputTuple,
    ChangeFeeManagerEvent.OutputObject
  >;
  getEvent(
    key: "ChangeLedgerImplA"
  ): TypedContractEvent<
    ChangeLedgerImplAEvent.InputTuple,
    ChangeLedgerImplAEvent.OutputTuple,
    ChangeLedgerImplAEvent.OutputObject
  >;
  getEvent(
    key: "ChangeLedgerImplB"
  ): TypedContractEvent<
    ChangeLedgerImplBEvent.InputTuple,
    ChangeLedgerImplBEvent.OutputTuple,
    ChangeLedgerImplBEvent.OutputObject
  >;
  getEvent(
    key: "ChangeLedgerImplC"
  ): TypedContractEvent<
    ChangeLedgerImplCEvent.InputTuple,
    ChangeLedgerImplCEvent.OutputTuple,
    ChangeLedgerImplCEvent.OutputObject
  >;
  getEvent(
    key: "ChangeLedgerImplD"
  ): TypedContractEvent<
    ChangeLedgerImplDEvent.InputTuple,
    ChangeLedgerImplDEvent.OutputTuple,
    ChangeLedgerImplDEvent.OutputObject
  >;
  getEvent(
    key: "ChangeMarketManager"
  ): TypedContractEvent<
    ChangeMarketManagerEvent.InputTuple,
    ChangeMarketManagerEvent.OutputTuple,
    ChangeMarketManagerEvent.OutputObject
  >;
  getEvent(
    key: "ChangeOperatorManager"
  ): TypedContractEvent<
    ChangeOperatorManagerEvent.InputTuple,
    ChangeOperatorManagerEvent.OutputTuple,
    ChangeOperatorManagerEvent.OutputObject
  >;
  getEvent(
    key: "ChangeVaultManager"
  ): TypedContractEvent<
    ChangeVaultManagerEvent.InputTuple,
    ChangeVaultManagerEvent.OutputTuple,
    ChangeVaultManagerEvent.OutputObject
  >;
  getEvent(
    key: "DelegateSigner"
  ): TypedContractEvent<
    DelegateSignerEvent.InputTuple,
    DelegateSignerEvent.OutputTuple,
    DelegateSignerEvent.OutputObject
  >;
  getEvent(
    key: "FeeDistribution"
  ): TypedContractEvent<
    FeeDistributionEvent.InputTuple,
    FeeDistributionEvent.OutputTuple,
    FeeDistributionEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "InternalTransferFinalised"
  ): TypedContractEvent<
    InternalTransferFinalisedEvent.InputTuple,
    InternalTransferFinalisedEvent.OutputTuple,
    InternalTransferFinalisedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationResult"
  ): TypedContractEvent<
    LiquidationResultEvent.InputTuple,
    LiquidationResultEvent.OutputTuple,
    LiquidationResultEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationResultV2"
  ): TypedContractEvent<
    LiquidationResultV2Event.InputTuple,
    LiquidationResultV2Event.OutputTuple,
    LiquidationResultV2Event.OutputObject
  >;
  getEvent(
    key: "LiquidationTransfer"
  ): TypedContractEvent<
    LiquidationTransferEvent.InputTuple,
    LiquidationTransferEvent.OutputTuple,
    LiquidationTransferEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationTransferV2"
  ): TypedContractEvent<
    LiquidationTransferV2Event.InputTuple,
    LiquidationTransferV2Event.OutputTuple,
    LiquidationTransferV2Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PrimeWalletSet"
  ): TypedContractEvent<
    PrimeWalletSetEvent.InputTuple,
    PrimeWalletSetEvent.OutputTuple,
    PrimeWalletSetEvent.OutputObject
  >;
  getEvent(
    key: "ProcessValidatedFutures(bytes32,bytes32,bytes32,int128,int128,uint128,int128,int128,uint64,uint64,uint64,bool)"
  ): TypedContractEvent<
    ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_int128_int128_uint64_uint64_uint64_bool_Event.InputTuple,
    ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_int128_int128_uint64_uint64_uint64_bool_Event.OutputTuple,
    ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_int128_int128_uint64_uint64_uint64_bool_Event.OutputObject
  >;
  getEvent(
    key: "ProcessValidatedFutures(bytes32,bytes32,bytes32,int128,int128,uint128,uint128,int128,uint64,uint64,uint64,bool)"
  ): TypedContractEvent<
    ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_uint128_int128_uint64_uint64_uint64_bool_Event.InputTuple,
    ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_uint128_int128_uint64_uint64_uint64_bool_Event.OutputTuple,
    ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_uint128_int128_uint64_uint64_uint64_bool_Event.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetBrokerFromLedgerInitiated"
  ): TypedContractEvent<
    SetBrokerFromLedgerInitiatedEvent.InputTuple,
    SetBrokerFromLedgerInitiatedEvent.OutputTuple,
    SetBrokerFromLedgerInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementExecution"
  ): TypedContractEvent<
    SettlementExecutionEvent.InputTuple,
    SettlementExecutionEvent.OutputTuple,
    SettlementExecutionEvent.OutputObject
  >;
  getEvent(
    key: "SettlementResult"
  ): TypedContractEvent<
    SettlementResultEvent.InputTuple,
    SettlementResultEvent.OutputTuple,
    SettlementResultEvent.OutputObject
  >;
  getEvent(
    key: "SwapResultUploaded"
  ): TypedContractEvent<
    SwapResultUploadedEvent.InputTuple,
    SwapResultUploadedEvent.OutputTuple,
    SwapResultUploadedEvent.OutputObject
  >;

  filters: {
    "AccountDeposit(bytes32,uint64,uint64,address,bytes32,uint128,uint256,uint64,bytes32)": TypedContractEvent<
      AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_Event.InputTuple,
      AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_Event.OutputTuple,
      AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_Event.OutputObject
    >;
    "AccountDeposit(bytes32,uint64,uint64,address,bytes32,uint128,uint256,uint64,bytes32,uint256)": TypedContractEvent<
      AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_uint256_Event.InputTuple,
      AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_uint256_Event.OutputTuple,
      AccountDeposit_bytes32_uint64_uint64_address_bytes32_uint128_uint256_uint64_bytes32_uint256_Event.OutputObject
    >;

    "AccountDepositSol(bytes32,uint64,uint64,bytes32,bytes32,uint128,uint256,uint64,bytes32)": TypedContractEvent<
      AccountDepositSolEvent.InputTuple,
      AccountDepositSolEvent.OutputTuple,
      AccountDepositSolEvent.OutputObject
    >;
    AccountDepositSol: TypedContractEvent<
      AccountDepositSolEvent.InputTuple,
      AccountDepositSolEvent.OutputTuple,
      AccountDepositSolEvent.OutputObject
    >;

    "AccountRegister(bytes32,bytes32,address)": TypedContractEvent<
      AccountRegister_bytes32_bytes32_address_Event.InputTuple,
      AccountRegister_bytes32_bytes32_address_Event.OutputTuple,
      AccountRegister_bytes32_bytes32_address_Event.OutputObject
    >;
    "AccountRegister(bytes32,bytes32,bytes32)": TypedContractEvent<
      AccountRegister_bytes32_bytes32_bytes32_Event.InputTuple,
      AccountRegister_bytes32_bytes32_bytes32_Event.OutputTuple,
      AccountRegister_bytes32_bytes32_bytes32_Event.OutputObject
    >;
    "AccountRegister(bytes32,bytes32,address,uint256)": TypedContractEvent<
      AccountRegister_bytes32_bytes32_address_uint256_Event.InputTuple,
      AccountRegister_bytes32_bytes32_address_uint256_Event.OutputTuple,
      AccountRegister_bytes32_bytes32_address_uint256_Event.OutputObject
    >;

    "AccountWithdraw2Contract(bytes32,uint64,uint64,uint256,bytes32,uint128,uint128,address)": TypedContractEvent<
      AccountWithdraw2ContractEvent.InputTuple,
      AccountWithdraw2ContractEvent.OutputTuple,
      AccountWithdraw2ContractEvent.OutputObject
    >;
    AccountWithdraw2Contract: TypedContractEvent<
      AccountWithdraw2ContractEvent.InputTuple,
      AccountWithdraw2ContractEvent.OutputTuple,
      AccountWithdraw2ContractEvent.OutputObject
    >;

    "AccountWithdrawApprove(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128)": TypedContractEvent<
      AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.InputTuple,
      AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.OutputTuple,
      AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.OutputObject
    >;
    "AccountWithdrawApprove(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint256)": TypedContractEvent<
      AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.InputTuple,
      AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.OutputTuple,
      AccountWithdrawApprove_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.OutputObject
    >;
    "AccountWithdrawFail(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint8)": TypedContractEvent<
      AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint8_Event.InputTuple,
      AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint8_Event.OutputTuple,
      AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint8_Event.OutputObject
    >;
    "AccountWithdrawFail(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint256,uint8)": TypedContractEvent<
      AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_uint8_Event.InputTuple,
      AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_uint8_Event.OutputTuple,
      AccountWithdrawFail_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_uint8_Event.OutputObject
    >;
    "AccountWithdrawFinish(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128)": TypedContractEvent<
      AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.InputTuple,
      AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.OutputTuple,
      AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_Event.OutputObject
    >;
    "AccountWithdrawFinish(bytes32,uint64,uint64,bytes32,address,address,uint256,bytes32,uint128,uint128,uint256)": TypedContractEvent<
      AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.InputTuple,
      AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.OutputTuple,
      AccountWithdrawFinish_bytes32_uint64_uint64_bytes32_address_address_uint256_bytes32_uint128_uint128_uint256_Event.OutputObject
    >;

    "AccountWithdrawSolApprove(bytes32,uint64,uint64,bytes32,bytes32,bytes32,uint256,bytes32,uint128,uint128)": TypedContractEvent<
      AccountWithdrawSolApproveEvent.InputTuple,
      AccountWithdrawSolApproveEvent.OutputTuple,
      AccountWithdrawSolApproveEvent.OutputObject
    >;
    AccountWithdrawSolApprove: TypedContractEvent<
      AccountWithdrawSolApproveEvent.InputTuple,
      AccountWithdrawSolApproveEvent.OutputTuple,
      AccountWithdrawSolApproveEvent.OutputObject
    >;

    "AccountWithdrawSolFail(bytes32,uint64,uint64,bytes32,bytes32,bytes32,uint256,bytes32,uint128,uint128,uint8)": TypedContractEvent<
      AccountWithdrawSolFailEvent.InputTuple,
      AccountWithdrawSolFailEvent.OutputTuple,
      AccountWithdrawSolFailEvent.OutputObject
    >;
    AccountWithdrawSolFail: TypedContractEvent<
      AccountWithdrawSolFailEvent.InputTuple,
      AccountWithdrawSolFailEvent.OutputTuple,
      AccountWithdrawSolFailEvent.OutputObject
    >;

    "AdlResult(uint64,bytes32,bytes32,bytes32,int128,int128,uint128,int128,uint64)": TypedContractEvent<
      AdlResultEvent.InputTuple,
      AdlResultEvent.OutputTuple,
      AdlResultEvent.OutputObject
    >;
    AdlResult: TypedContractEvent<
      AdlResultEvent.InputTuple,
      AdlResultEvent.OutputTuple,
      AdlResultEvent.OutputObject
    >;

    "AdlResultV2(uint64,bytes32,bytes32,int128,int128,uint128,int128,uint64)": TypedContractEvent<
      AdlResultV2Event.InputTuple,
      AdlResultV2Event.OutputTuple,
      AdlResultV2Event.OutputObject
    >;
    AdlResultV2: TypedContractEvent<
      AdlResultV2Event.InputTuple,
      AdlResultV2Event.OutputTuple,
      AdlResultV2Event.OutputObject
    >;

    "BalanceTransfer(uint64,uint256,bytes32,bytes32,uint128,bytes32,bool,uint8)": TypedContractEvent<
      BalanceTransferEvent.InputTuple,
      BalanceTransferEvent.OutputTuple,
      BalanceTransferEvent.OutputObject
    >;
    BalanceTransfer: TypedContractEvent<
      BalanceTransferEvent.InputTuple,
      BalanceTransferEvent.OutputTuple,
      BalanceTransferEvent.OutputObject
    >;

    "ChangeCrossChainManager(address,address)": TypedContractEvent<
      ChangeCrossChainManagerEvent.InputTuple,
      ChangeCrossChainManagerEvent.OutputTuple,
      ChangeCrossChainManagerEvent.OutputObject
    >;
    ChangeCrossChainManager: TypedContractEvent<
      ChangeCrossChainManagerEvent.InputTuple,
      ChangeCrossChainManagerEvent.OutputTuple,
      ChangeCrossChainManagerEvent.OutputObject
    >;

    "ChangeCrossChainManagerV2(address,address)": TypedContractEvent<
      ChangeCrossChainManagerV2Event.InputTuple,
      ChangeCrossChainManagerV2Event.OutputTuple,
      ChangeCrossChainManagerV2Event.OutputObject
    >;
    ChangeCrossChainManagerV2: TypedContractEvent<
      ChangeCrossChainManagerV2Event.InputTuple,
      ChangeCrossChainManagerV2Event.OutputTuple,
      ChangeCrossChainManagerV2Event.OutputObject
    >;

    "ChangeFeeManager(address,address)": TypedContractEvent<
      ChangeFeeManagerEvent.InputTuple,
      ChangeFeeManagerEvent.OutputTuple,
      ChangeFeeManagerEvent.OutputObject
    >;
    ChangeFeeManager: TypedContractEvent<
      ChangeFeeManagerEvent.InputTuple,
      ChangeFeeManagerEvent.OutputTuple,
      ChangeFeeManagerEvent.OutputObject
    >;

    "ChangeLedgerImplA(address,address)": TypedContractEvent<
      ChangeLedgerImplAEvent.InputTuple,
      ChangeLedgerImplAEvent.OutputTuple,
      ChangeLedgerImplAEvent.OutputObject
    >;
    ChangeLedgerImplA: TypedContractEvent<
      ChangeLedgerImplAEvent.InputTuple,
      ChangeLedgerImplAEvent.OutputTuple,
      ChangeLedgerImplAEvent.OutputObject
    >;

    "ChangeLedgerImplB(address,address)": TypedContractEvent<
      ChangeLedgerImplBEvent.InputTuple,
      ChangeLedgerImplBEvent.OutputTuple,
      ChangeLedgerImplBEvent.OutputObject
    >;
    ChangeLedgerImplB: TypedContractEvent<
      ChangeLedgerImplBEvent.InputTuple,
      ChangeLedgerImplBEvent.OutputTuple,
      ChangeLedgerImplBEvent.OutputObject
    >;

    "ChangeLedgerImplC(address,address)": TypedContractEvent<
      ChangeLedgerImplCEvent.InputTuple,
      ChangeLedgerImplCEvent.OutputTuple,
      ChangeLedgerImplCEvent.OutputObject
    >;
    ChangeLedgerImplC: TypedContractEvent<
      ChangeLedgerImplCEvent.InputTuple,
      ChangeLedgerImplCEvent.OutputTuple,
      ChangeLedgerImplCEvent.OutputObject
    >;

    "ChangeLedgerImplD(address,address)": TypedContractEvent<
      ChangeLedgerImplDEvent.InputTuple,
      ChangeLedgerImplDEvent.OutputTuple,
      ChangeLedgerImplDEvent.OutputObject
    >;
    ChangeLedgerImplD: TypedContractEvent<
      ChangeLedgerImplDEvent.InputTuple,
      ChangeLedgerImplDEvent.OutputTuple,
      ChangeLedgerImplDEvent.OutputObject
    >;

    "ChangeMarketManager(address,address)": TypedContractEvent<
      ChangeMarketManagerEvent.InputTuple,
      ChangeMarketManagerEvent.OutputTuple,
      ChangeMarketManagerEvent.OutputObject
    >;
    ChangeMarketManager: TypedContractEvent<
      ChangeMarketManagerEvent.InputTuple,
      ChangeMarketManagerEvent.OutputTuple,
      ChangeMarketManagerEvent.OutputObject
    >;

    "ChangeOperatorManager(address,address)": TypedContractEvent<
      ChangeOperatorManagerEvent.InputTuple,
      ChangeOperatorManagerEvent.OutputTuple,
      ChangeOperatorManagerEvent.OutputObject
    >;
    ChangeOperatorManager: TypedContractEvent<
      ChangeOperatorManagerEvent.InputTuple,
      ChangeOperatorManagerEvent.OutputTuple,
      ChangeOperatorManagerEvent.OutputObject
    >;

    "ChangeVaultManager(address,address)": TypedContractEvent<
      ChangeVaultManagerEvent.InputTuple,
      ChangeVaultManagerEvent.OutputTuple,
      ChangeVaultManagerEvent.OutputObject
    >;
    ChangeVaultManager: TypedContractEvent<
      ChangeVaultManagerEvent.InputTuple,
      ChangeVaultManagerEvent.OutputTuple,
      ChangeVaultManagerEvent.OutputObject
    >;

    "DelegateSigner(uint64,uint256,bytes32,address,bytes32,address)": TypedContractEvent<
      DelegateSignerEvent.InputTuple,
      DelegateSignerEvent.OutputTuple,
      DelegateSignerEvent.OutputObject
    >;
    DelegateSigner: TypedContractEvent<
      DelegateSignerEvent.InputTuple,
      DelegateSignerEvent.OutputTuple,
      DelegateSignerEvent.OutputObject
    >;

    "FeeDistribution(uint64,bytes32,bytes32,uint128,bytes32)": TypedContractEvent<
      FeeDistributionEvent.InputTuple,
      FeeDistributionEvent.OutputTuple,
      FeeDistributionEvent.OutputObject
    >;
    FeeDistribution: TypedContractEvent<
      FeeDistributionEvent.InputTuple,
      FeeDistributionEvent.OutputTuple,
      FeeDistributionEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "InternalTransferFinalised(uint64,uint256,bytes32,bytes32,uint128)": TypedContractEvent<
      InternalTransferFinalisedEvent.InputTuple,
      InternalTransferFinalisedEvent.OutputTuple,
      InternalTransferFinalisedEvent.OutputObject
    >;
    InternalTransferFinalised: TypedContractEvent<
      InternalTransferFinalisedEvent.InputTuple,
      InternalTransferFinalisedEvent.OutputTuple,
      InternalTransferFinalisedEvent.OutputObject
    >;

    "LiquidationResult(uint64,bytes32,bytes32,bytes32,uint128,uint64)": TypedContractEvent<
      LiquidationResultEvent.InputTuple,
      LiquidationResultEvent.OutputTuple,
      LiquidationResultEvent.OutputObject
    >;
    LiquidationResult: TypedContractEvent<
      LiquidationResultEvent.InputTuple,
      LiquidationResultEvent.OutputTuple,
      LiquidationResultEvent.OutputObject
    >;

    "LiquidationResultV2(uint64,bytes32,bytes32,int128,uint64)": TypedContractEvent<
      LiquidationResultV2Event.InputTuple,
      LiquidationResultV2Event.OutputTuple,
      LiquidationResultV2Event.OutputObject
    >;
    LiquidationResultV2: TypedContractEvent<
      LiquidationResultV2Event.InputTuple,
      LiquidationResultV2Event.OutputTuple,
      LiquidationResultV2Event.OutputObject
    >;

    "LiquidationTransfer(uint64,bytes32,bytes32,int128,int128,int128,int128,int128,uint128,int128)": TypedContractEvent<
      LiquidationTransferEvent.InputTuple,
      LiquidationTransferEvent.OutputTuple,
      LiquidationTransferEvent.OutputObject
    >;
    LiquidationTransfer: TypedContractEvent<
      LiquidationTransferEvent.InputTuple,
      LiquidationTransferEvent.OutputTuple,
      LiquidationTransferEvent.OutputObject
    >;

    "LiquidationTransferV2(bytes32,bytes32,int128,int128,int128,uint128,int128)": TypedContractEvent<
      LiquidationTransferV2Event.InputTuple,
      LiquidationTransferV2Event.OutputTuple,
      LiquidationTransferV2Event.OutputObject
    >;
    LiquidationTransferV2: TypedContractEvent<
      LiquidationTransferV2Event.InputTuple,
      LiquidationTransferV2Event.OutputTuple,
      LiquidationTransferV2Event.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PrimeWalletSet(bytes32,address)": TypedContractEvent<
      PrimeWalletSetEvent.InputTuple,
      PrimeWalletSetEvent.OutputTuple,
      PrimeWalletSetEvent.OutputObject
    >;
    PrimeWalletSet: TypedContractEvent<
      PrimeWalletSetEvent.InputTuple,
      PrimeWalletSetEvent.OutputTuple,
      PrimeWalletSetEvent.OutputObject
    >;

    "ProcessValidatedFutures(bytes32,bytes32,bytes32,int128,int128,uint128,int128,int128,uint64,uint64,uint64,bool)": TypedContractEvent<
      ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_int128_int128_uint64_uint64_uint64_bool_Event.InputTuple,
      ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_int128_int128_uint64_uint64_uint64_bool_Event.OutputTuple,
      ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_int128_int128_uint64_uint64_uint64_bool_Event.OutputObject
    >;
    "ProcessValidatedFutures(bytes32,bytes32,bytes32,int128,int128,uint128,uint128,int128,uint64,uint64,uint64,bool)": TypedContractEvent<
      ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_uint128_int128_uint64_uint64_uint64_bool_Event.InputTuple,
      ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_uint128_int128_uint64_uint64_uint64_bool_Event.OutputTuple,
      ProcessValidatedFutures_bytes32_bytes32_bytes32_int128_int128_uint128_uint128_int128_uint64_uint64_uint64_bool_Event.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetBrokerFromLedgerInitiated(uint256[],bytes32,bool)": TypedContractEvent<
      SetBrokerFromLedgerInitiatedEvent.InputTuple,
      SetBrokerFromLedgerInitiatedEvent.OutputTuple,
      SetBrokerFromLedgerInitiatedEvent.OutputObject
    >;
    SetBrokerFromLedgerInitiated: TypedContractEvent<
      SetBrokerFromLedgerInitiatedEvent.InputTuple,
      SetBrokerFromLedgerInitiatedEvent.OutputTuple,
      SetBrokerFromLedgerInitiatedEvent.OutputObject
    >;

    "SettlementExecution(bytes32,uint128,int128,int128)": TypedContractEvent<
      SettlementExecutionEvent.InputTuple,
      SettlementExecutionEvent.OutputTuple,
      SettlementExecutionEvent.OutputObject
    >;
    SettlementExecution: TypedContractEvent<
      SettlementExecutionEvent.InputTuple,
      SettlementExecutionEvent.OutputTuple,
      SettlementExecutionEvent.OutputObject
    >;

    "SettlementResult(uint64,bytes32,int128,bytes32,bytes32,uint128,uint64,uint64)": TypedContractEvent<
      SettlementResultEvent.InputTuple,
      SettlementResultEvent.OutputTuple,
      SettlementResultEvent.OutputObject
    >;
    SettlementResult: TypedContractEvent<
      SettlementResultEvent.InputTuple,
      SettlementResultEvent.OutputTuple,
      SettlementResultEvent.OutputObject
    >;

    "SwapResultUploaded(uint64,bytes32,bytes32,bytes32,int128,int128,uint256,uint8)": TypedContractEvent<
      SwapResultUploadedEvent.InputTuple,
      SwapResultUploadedEvent.OutputTuple,
      SwapResultUploadedEvent.OutputObject
    >;
    SwapResultUploaded: TypedContractEvent<
      SwapResultUploadedEvent.InputTuple,
      SwapResultUploadedEvent.OutputTuple,
      SwapResultUploadedEvent.OutputObject
    >;
  };
}
