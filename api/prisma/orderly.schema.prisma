// This is your Prisma schema file for the Orderly MySQL database
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../src/lib/generated/orderly-client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = "mysql://dummy:dummy@localhost:3306/dummy"
}

// Orderly broker model for the Orderly database
model OrderlyBroker {
  id                      BigInt   @id @default(autoincrement()) @db.BigInt
  brokerId                String   @unique @db.VarChar(64) @map("broker_id")
  createdTime             DateTime @default(now()) @db.Timestamp(3) @map("created_time")
  updatedTime             DateTime @default(now()) @updatedAt @db.Timestamp(3) @map("updated_time")
  brokerName              String   @db.VarChar(64) @map("broker_name")
  brokerHash              String   @unique @default("") @db.VarChar(256) @map("broker_hash")
  baseMakerFeeRate        Decimal  @default(0.00000000) @db.Decimal(28, 8) @map("base_maker_fee_rate")
  baseTakerFeeRate        Decimal  @default(0.00000000) @db.Decimal(28, 8) @map("base_taker_fee_rate")
  defaultMakerFeeRate     Decimal  @default(0.00000000) @db.Decimal(28, 8) @map("default_maker_fee_rate")
  defaultTakerFeeRate     Decimal  @default(0.00000000) @db.Decimal(28, 8) @map("default_taker_fee_rate")
  adminAccountId          String?  @db.VarChar(128) @map("admin_account_id")
  rebateCap               Decimal  @default(1.00) @db.Decimal(4, 2) @map("rebate_cap")
  grossFeeEnable          Boolean  @default(false) @db.TinyInt @map("gross_fee_enable")
  lockedRebateAllocation  Boolean  @default(false) @db.TinyInt @map("locked_rebate_allocation")
  isAllSubsideTakerFee    Boolean  @default(false) @db.TinyInt @map("is_all_subside_taker_fee")

  @@map("broker")
}

// Broker tiered fee daily log model
model BrokerTieredFeeDailyLog {
  id                        BigInt   @id @default(autoincrement()) @db.BigInt
  brokerId                  String   @db.VarChar(64) @map("broker_id")
  logDate                   DateTime @db.Date @map("log_date")
  typeFinal                 String?  @db.VarChar(128) @map("type_final")
  type                      String   @db.VarChar(128)
  stakingVolume             Decimal  @db.Decimal(23, 8) @map("staking_volume")
  tradingVolume             Decimal  @db.Decimal(23, 8) @map("trading_volume")
  stakingVolumeThreshold    Decimal  @db.Decimal(23, 8) @map("staking_volume_threshold")
  tradingVolumeThreshold    Decimal  @db.Decimal(23, 8) @map("trading_volume_threshold")
  makerFeeRate              Decimal  @db.Decimal(23, 8) @map("maker_fee_rate")
  takerFeeRate              Decimal  @db.Decimal(23, 8) @map("taker_fee_rate")
  createdTime               DateTime @default(now()) @db.Timestamp(3) @map("created_time")
  updatedTime               DateTime @default(now()) @updatedAt @db.Timestamp(3) @map("updated_time")
  typeOverriding            String?  @db.VarChar(128) @map("type_overriding")
  stakingAddressOverriding  String?  @db.VarChar(128) @map("staking_address_overriding")
  stakingVolumeOverriding   Decimal? @db.Decimal(23, 8) @map("staking_volume_overriding")

  @@unique([brokerId, logDate], map: "uniq_broker_id_log_date")
  @@map("broker_tiered_fee_daily_log")
}
